server {
  listen 80;
  server_name <your-domain>.com;

  location / {
    return 301 https://$server_name$request_uri;
  }
}

upstream app_upstream {
  server 127.0.0.1:4000;
}

server {
  listen 443 ssl spdy;
  server_name <your-domain>.com www.<your-domain>.com;
  root /srv/opt/<your-app-name>;
  index index.html;

  charset utf-8;

  ssl on;

  # Keys
  ssl_certificate /etc/nginx/ssl/certs/<your-public-cert-name>.pem;
  ssl_certificate_key /etc/nginx/ssl/private/<your-private-key-name>.pem;
  ssl_dhparam /etc/nginx/ssl/certs/dhparam.pem; # generated with openssl

  # Safety enhancement to SSL: make sure we actually use a safe cipher, and only use TLS.
  # Ciphers recommended by Mozzila: https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations
  # Also see http://security.stackexchange.com/questions/54639/recommended-ssl-ciphers-for-security-compatibility-perfect-forward-secrecy
  # Consider using cipher list recommended by acme-tiny: https://github.com/diafygi/acme-tiny
  ssl_prefer_server_ciphers on;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';

  # OCSP stapling
  # see: http://blog.commando.io/the-perfect-nginx-ssl-configuration/
  # and: http://blog.commando.io/ssl-ocsp-stapling-with-nginx/
  ssl_stapling on;
  ssl_stapling_verify on;
  ssl_trusted_certificate /etc/nginx/ssl/certs/<your-public-cert-name>.pem;
  resolver 8.8.8.8 8.8.4.4 valid=300s;
  resolver_timeout 10s;

  # SSL cache
  ssl_session_cache shared:SSL:50m;
  ssl_session_timeout 5m;

  # Config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
  # To avoid SSL stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
  add_header Strict-Transport-Security "max-age=31536000;";

  # SPA Admin Front-end
  location ~* ^/admin/(.*)$ {
    try_files /admin/index.html =404;
  }

  # Everything else
  location / {
    try_files $uri @proxy;
  }

  # Static File Caching
  location ~* .(jpg|jpeg|png|gif|ico|css|js|woff|woff2|eot|svg|ttf|robots.txt|favicon.ico) {
    access_log off;
    log_not_found off;
    expires 30d;
  }

  # Pass requests for dynamic content to Nodejs application.
  location @proxy {
    proxy_hide_header X-Powered-By;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # Allow websockets:
    # proxy_set_header Upgrade $http_upgrade;
    # proxy_set_header Connection 'upgrade';
    # proxy_cache_bypass $http_upgrade;

    proxy_pass http://app_upstream;
    proxy_redirect off;
  }
}
