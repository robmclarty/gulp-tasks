server {
  listen 443 ssl default deferred spdy;

  set $app_root_path /home/ubuntu/apps/jwt-sales-finder;
  set $app_instance 127.0.0.1:4001;

  server_name sales-finder.mbenablers.com;

  root $app_root_path/public;

  charset utf-8;

  ssl_certificate /etc/nginx/ssl/mbenablers2015.crt; # full path to SSL certificate and CA certificate concatenated together
  ssl_certificate_key /etc/nginx/ssl/private/mbenablers.key; # full path to SSL key

  # performance enhancement for SSL
  ssl_stapling on;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 5m;

  # safety enhancement to SSL: make sure we actually use a safe cipher
  # ciphers recommended by Mozzila: https://wiki.mozilla.org/Security/Server_Side_TLS
  ssl_prefer_server_ciphers on;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

  # ciphers recommended by Mozzila: https://wiki.mozilla.org/Security/Server_Side_TLS
  ssl_prefer_server_ciphers on;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4';

  # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
  # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
  add_header Strict-Transport-Security 'max-age=31536000;';

  # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
  # you can tell the browser that it can only download content from the domains you explicitly allow
  # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
  # https://www.owasp.org/index.php/Content_Security_Policy
  # I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
  # directives for css and js(if you have inline css or js, you will need to keep it too).
  # more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
  add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";


  # Tells the browser whether you want to allow your site to be framed or not.
  # By preventing a browser from framing your site your can defend against
  # attacks like clickjacking.
  add_header x-frame-options 'SAMEORIGIN';

  # Sets the configuration for the cross-site scripting filter built into most browsers.
  add_header X-XSS-Protection '1; mode=block';

  # Stops a browser from trying to MIME-sniff the content type and forces it to
  # stick with the declared content-type. This helps to reduce the danger of
  # drive-by downloads.
  add_header X-Content-Type-Options 'nosniff';

  location / {
    # Don't need https when talking to Nodejs as Nginx is proxying SSL traffic and handling encryption itself, above the application layer.
    proxy_pass http://$app_instance$request_uri;
    proxy_http_version 1.1;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Upgrade $http_upgrade; # allow websockets
    proxy_set_header Connection 'upgrade';
    proxy_cache_bypass $http_upgrade;

    proxy_redirect off;
  }
}
